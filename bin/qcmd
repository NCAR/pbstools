#!/bin/bash

my_name=$(basename $0)
my_root=$(cd $(dirname $(readlink -f $0))/..; pwd)

function usage {
cat << EOF
Usage: $my_name [PBS options] -- executable [options]

This script will run a command/executable on the ${pbs_opts[-q]} queue using $res_type
by default. Any arguments submitted to the script will be forwarded to the qsub
command, enabling you to override script defaults (e.g., walltime). Note that
commands run using qcmd will *not* have interactive terminal support. Please
use qinteractive or qsub -I for interactive jobs.

In addition to the standard PBS options, this command provides the following
short resource flags:

    --nchunks       [CHUNK COUNT]
    --ntasks        [MPI TASKS PER CHUNK]
    --nthreads      [SMP THREADS PER CHUNK]
    --mem           [MEMORY PER CHUNK]
    --ngpus         [GPUS PER CHUNK]
    --cpu           [CPU TYPE]
    --gpu           [GPU TYPE]

Note that heterogenous resource requests are not possible using the short-form
options. Use a standard "-l select=" flag for heterogenous jobs.

You have two ways of selecting an account to use for the submission:

1. Use the PBS -A [account] command line argument
2. Set PBS_ACCOUNT or $acc_var environment variable
   (the latter takes precedence)

If you do not set an account to use, a random project will be chosen from the 
list of valid projects for your username. It is best to set an account!

Current values:
  PBS_ACCOUNT=${PBS_ACCOUNT:-N/A}
  $acc_var=${!acc_var:-N/A}

EOF
exit
}

handle_logs () {
    if [[ $debug_mode != true ]]; then
        rm -f $qcmd_script
    fi

    # Get exit status from script
    if [[ -f $qcmd_log ]]; then
        ret_code=$(grep -m1 "^%qcmddone%" $qcmd_log | cut -d' ' -f2)

        if [[ $ret_code -eq 0 ]]; then
            qcmd_msg="Job exited normally"
        else
            qcmd_msg="Job exited with non-zero status"
        fi
        
        if [[ ! -z $logpath ]]; then
            echo -e "\n\nWriting output to specified log file at:"
            echo "    $logpath"
            sed -i '/^%qcmddone%/d' $qcmd_log
            echo -e "\nQCMD: $qcmd_msg" >> $qcmd_log
            mv $qcmd_log $logpath
        else
            rm -f $qcmd_log
        fi

        exit $ret_code
    fi
}

clean_up () {
    if qstat ${qcmd_job%%.*} &> /dev/null; then
        qdel $qcmd_job 2> /dev/null
    fi
    
    if [[ ! -z $qcmd_job ]]; then
        echo -e "\nqcmd job $qcmd_job terminated"
        sleep 5
        handle_logs
    fi

    exit 1
}


# Call parse_opts to construct PBS resource string
source $my_root/util/parse_opts

if [[ $# -eq 0 ]]; then
    2>&1 echo "Error: No command provided to execute"
    exit 1
else
    my_command="$@"
fi

if [[ $dry_run == true ]]; then
    echo "Using qsub arguments ..."
    echo -e "    qsub $qsub_args\n"
    exit 0
fi

# If running in a PBS job, use original shell
if [[ ! -z $PBS_O_SHELL ]]; then
    my_shell=$PBS_O_SHELL
else
    my_shell=$SHELL
fi

# Submit job request using temp script and write output to home directory
mkdir -p ~/.qcmd
qcmd_script=~/.qcmd/script.$$

cat > $qcmd_script << EOF
#!/bin/bash

function bad_exit {
    echo "%qcmddone% 1"
}

trap bad_exit SIGTERM

cd \$PBS_O_WORKDIR
$my_shell -c "$my_command"
my_status=\$?
echo "%qcmddone% \$my_status"
exit \$my_status
EOF

# Submit job and get job ID
SECONDS=0
qcmd_log=$HOME/.qcmd/out.$$
qcmd_job=$(qsub $qsub_args -j oe -k oed -o $qcmd_log -N qcmd -V $qcmd_script 2>&1)
qsub_status=$?

# Check that job ID was produced
if [[ $qsub_status != 0 ]]; then
    echo $qcmd_job
    echo "Error: error in qsub submission. Exiting ..."
    exit $qsub_status
fi

trap clean_up SIGINT SIGTERM
echo "Waiting on job launch; $qcmd_job with qsub arguments:"
echo -e "    qsub $qsub_args\n"

while [[ ! -f $qcmd_log ]]; do
    if [[ $SECONDS -gt 30 ]] && [[ -z $job_exists ]]; then
        # Try to use cached qstat once - if that fails, use real qstat once
        if ! qstat ${qcmd_job%%.*} &> /dev/null; then
            export QSCACHE_BYPASS=true

            if ! qstat ${qcmd_job%%.*} &> /dev/null; then
                echo "Error: PBS could not successfully start job. Exiting..."
                exit 1
            fi
        fi

        job_exists=true
    fi

    sleep 1
done

# Follow job output
tail -n +1 -f $qcmd_log | while read entry; do
    if [[ $entry == %qcmddone%* ]]; then
        pkill -P $$ tail
    else
        echo -e "$entry"
    fi
done

# Get exit code and clean up
handle_logs
