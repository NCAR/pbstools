#!/bin/bash 

NCHUNKS= NCPUS= NTASKS= NTHREADS=
QSUBCMD=qsub SKIPQSUB=false
DEFOPTS=" -l -q -A "
DEFRES='-l select=${NCHUNKS:-1}:ncpus=${NCPUS:-1}:mpiprocs=${NTASKS:-1}'

declare -A PBSOPTS RESFLAGS
RESFLAGS=( [NTHREADS]=ompthreads [MEM]=mem [CPU]=cpu_type [NGPUS]=ngpus )

# Default settings based on the current system
if [[ $0 == *qinteractive* ]]; then
    QUEUE=share
    WALLTIME=3600
    ACVAR=PBS_ACCOUNT
    SERVERNAME=chadmin1.ib0.cheyenne.ucar.edu
else
    if [[ $@ == *-q*( )gpudev* ]]; then
        QUEUE=gpudev
        WALLTIME=00:30:00
        DEFRES=${DEFRES}':ngpus=${NGPUS:-1}'
        PBSOPTS[GPUTYPE]="-l gpu_type=v100"
    else
        QUEUE=casper
        WALLTIME=06:00:00
    fi

    ACVAR=DAV_PROJECT
    SERVERNAME=casper-pbs
fi

PBSOPTS[WALLTIME]="-l walltime=${WALLTIME}"
PBSOPTS[QUEUE]="-q ${QUEUE}@${SERVERNAME}"

usage () {
cat << EOF
Usage: $(basename $0) [PBS options] 

This command will start an interactive job on the $QUEUE queue using one core
by default. Any arguments submitted to the script will be forwarded to the qsub
command, enabling you to override script defaults (e.g., walltime). In addition
to the standard PBS options, this command provides the following short resource
flags:

    --nchunks       [CHUNK COUNT]
    --ntasks        [MPI TASKS PER CHUNK]
    --nthreads      [SMP THREADS PER CHUNK]
    --mem           [MEMORY PER CHUNK]
EOF

if [[ $QUEUE == casper ]]; then
    echo "    --ngpus         [GPUS PER CHUNK]"
    echo "    --cpu           [CPU TYPE]"
    echo "    --gpu           [GPU TYPE]"
fi

cat << EOF

Note that heteorogenous resource requests are not possible using the short-form
options. Use a standard "-l select=" flag for heteorogenous jobs.

You have two ways of selecting an account to use for the submission:

1. Use the PBS -A [account] command line argument
2. Set the $ACVAR environment variable

If you do not set an account to use, a random project will be chosen from the 
list of valid projects for your username. It is best to set an account!

Current $ACVAR value = ${!ACVAR}
EOF
exit
}

function get_value {
    ARGFLAG=$(cut -d= -f1 <<< ${1^^} | tr -d '-')
    
    if [[ $1 == *=* ]]; then
        declare -g $ARGFLAG=${1#*=}
    fi
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    ARG=$1

    case $ARG in
        --help)
    	    usage
            ;;
        --show)
            SKIPQSUB=true
            ;;
        --[a-z]*)
            get_value $ARG
            ;;
        *)
            ARGOPT=${ARG:0:2} ARGFLAG=
            
            if [[ $DEFOPTS == *" $ARGOPT "* ]]; then
                ARGVAL=${ARG:2}

                if [[ -z $ARGVAL ]]; then
                    shift; ARG=$1

                    if [[ $ARG == -* ]]; then
                        >&2 echo "Error: invalid input for option $ARGOPT: $ARG"
                        exit 1
                    else
                        ARGVAL=$ARG
                    fi
                fi
                
                if [[ $ARGOPT == -l ]]; then
                    if [[ $ARGVAL == select* ]]; then
                        PBSOPTS[SELECT]="-l $ARGVAL"
                    elif [[ $ARGVAL == walltime* ]]; then
                        PBSOPTS[WALLTIME]="-l $ARGVAL"
                    else
                        PBSARGS="$PBSARGS -l $ARGVAL"
                    fi
                elif [[ $ARGOPT == -q ]]; then
                    if [[ $ARGVAL != *@* ]]; then
                        PBSOPTS[QUEUE]="-q ${ARGVAL}@$SERVERNAME"
                    else
                        PBSOPTS[QUEUE]="-q $ARGVAL"
                    fi
                elif [[ $ARGOPT == -A ]]; then
                    PBSOPTS[ACCOUNT]="-A $ARGVAL"
                fi
            else
                PBSARGS="$PBSARGS $ARG"
            fi
            ;;
    esac
   
    if [[ -n $ARGFLAG ]]; then
        if [[ -z ${!ARGFLAG} ]]; then
            declare $ARGFLAG=$2
            shift
        fi

        case $ARGFLAG in
            NTHREADS|MEM|NGPUS|CPU)
                if [[ $DEFRES != *":${RESFLAGS[$ARGFLAG]}="* ]]; then
                    DEFRES=$DEFRES":${RESFLAGS[$ARGFLAG]}=\$${ARGFLAG}"
                fi
                ;;
            GPU)
                PBSOPTS[GPUTYPE]="-l gpu_type=$GPU"
                ;;
        esac
    fi

    shift
done

if [[ " ${!PBSOPTS[@]} " != *" ACCOUNT "* ]]; then
    if [[ -n ${!ACVAR} ]]; then
        JOB_ACCOUNT=${!ACVAR}
    else
        JOB_ACCOUNT=$(/ncar/opt/sam/sam_validate.py $USER 2> /dev/null | grep -m1 True | cut -d ',' -f 1; exit ${PIPESTATUS[0]})

        if [[ $? != 0 ]]; then
            >&2 echo "Error: cannot query default project - please specify using \$DAV_PROJECT or -A option"
            exit 1
        fi
    fi

    PBSOPTS[ACCOUNT]="-A $JOB_ACCOUNT"
fi

if [[ -z $NCPUS ]]; then
    if [[ -n $NTHREADS ]]; then
        NCPUS=$((NTASKS * NTHREADS))
    else
        NCPUS=$NTASKS
    fi
fi

if [[ $NCPUS -gt 36 ]]; then
    NCPUS=36
fi

# Substitute values into default select
if [[ -z ${PBSOPTS[SELECT]} ]]; then
    eval PBSOPTS[SELECT]=\"$DEFRES\"
fi

# Submit job using collected parameters
echo -e "Submitting interactive job to PBS ..."

if [[ -n $DISPLAY ]]; then
    # Test display to avoid qsub error
    if [[ -n "$(xauth list $DISPLAY)" ]]; then
        PBSARGS="-X $PBSARGS"
        echo -e "Setting display for X forwarding ...\n"
    else
        echo -e "Display not available; X forwarding disabled ...\n"
    fi
else
    echo -e "No display; X forwarding disabled ...\n"
fi

# Submit job request and put any user requests second to override defaults
echo "Running command:"
echo -e "$QSUBCMD -I $PBSARGS ${PBSOPTS[@]}\n"

if [[ $SKIPQSUB == false ]]; then
    $QSUBCMD -I $PBSARGS ${PBSOPTS[@]}
fi
